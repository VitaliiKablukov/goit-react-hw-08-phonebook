{"version":3,"file":"static/js/682.1a8d9925.chunk.js","mappings":"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","sources":["Redux/Contacts/selectors.js","components/ContactList/ContactItem/ContactItem.styled.js","components/ContactList/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.userContacts;\n\nexport const selectFilterText = state => state.filter;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n","import styled from 'styled-components';\nexport const Button = styled.button`\n  margin-left: 5px;\n  padding: 4px;\n  border: 1px solid;\n  border-radius: 4px;\n  box-shadow: 0px 0px 2px 0px rgba(10, 10, 10, 1);\n  :hover {\n    background-color: red;\n    scale: 1.1;\n  }\n`;\n","import { Button } from './ContactItem.styled';\n\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'Redux/Contacts/operation';\n\nexport const ContactItem = ({ contactItem }) => {\n  const dispatch = useDispatch();\n  const { id, name, number } = contactItem;\n\n  return (\n    <li key={id}>\n      {name}: {number}\n      <Button type=\"button\" onClick={() => dispatch(deleteContact(id))}>\n        delete:{name}\n      </Button>\n    </li>\n  );\n};\n","import styled from 'styled-components';\nexport const ContactsList = styled.ul`\n  padding: 0;\n`;\nexport const Text = styled.p`\n  margin: 0 auto;\n`;\n","import { ContactItem } from './ContactItem/ContactItem';\nimport { ContactsList, Text } from './ContactList.styled';\nimport { selectContacts, selectFilterText } from 'Redux/Contacts/selectors';\nimport { useSelector } from 'react-redux';\nexport const ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filterText = useSelector(selectFilterText);\n\n  const visibleContacts = contacts.filter(({ name }) =>\n    name.toLowerCase().includes(filterText.toLowerCase())\n  );\n  return contacts.length > 0 ? (\n    <ContactsList>\n      {visibleContacts.length > 0 ? (\n        visibleContacts.map(contactItem => {\n          return <ContactItem key={contactItem.id} contactItem={contactItem} />;\n        })\n      ) : (\n        <li>\n          <Text>no contacts were found for this request {filterText}</Text>\n        </li>\n      )}\n    </ContactsList>\n  ) : (\n    <Text>Sorry, but you don't have contacts</Text>\n  );\n};\n","import styled from 'styled-components';\nexport const Form = styled.form`\n  border: 1px solid;\n  border-radius: 4px;\n  border-color: #000;\n  padding: 15px;\n  text-align: center;\n`;\nexport const Label = styled.label`\n  display: block;\n  margin-bottom: 4px;\n`;\nexport const Input = styled.input`\n  display: block;\n  margin-bottom: 10px;\n`;\nexport const Button = styled.button`\n  padding: 4px;\n  border: 1px solid;\n  border-radius: 4px;\n  box-shadow: 2px 2px 2px 2px rgba(10, 10, 10, 1);\n  :hover {\n    background-color: green;\n    scale: 1.2;\n  }\n`;\n","import { Label, Input, Form, Button } from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'Redux/Contacts/selectors';\nimport { addContacts } from 'Redux/Contacts/operation';\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n\n  const dispatch = useDispatch();\n\n  const onSubmitForm = e => {\n    e.preventDefault();\n    const form = e.target;\n\n    const name = form.elements.name.value;\n\n    const number = form.elements.number.value;\n\n    if (contacts.some(el => el.name === name.toLowerCase())) {\n      form.reset();\n      return alert(`${name} is already contacts`);\n    } else {\n      dispatch(addContacts({ name, number }));\n      form.reset();\n      return;\n    }\n  };\n\n  return (\n    <Form onSubmit={onSubmitForm}>\n      <Label htmlFor=\"name\">Name:</Label>\n      <Input\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n      <Label htmlFor=\"number\">Number:</Label>\n      <Input\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n      <Button type=\"submit\">Add contact</Button>\n    </Form>\n  );\n};\n","import { Fragment } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { filterContacts } from 'Redux/Contacts/FilterSlice';\nimport { selectContacts } from 'Redux/Contacts/selectors';\n\nexport const Filter = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const filterText = e => {\n    dispatch(filterContacts(e.target.value));\n  };\n\n  return (\n    contacts.length > 0 && (\n      <Fragment>\n        <label htmlFor=\"filter\">Find contacts by name</label>\n        <input type=\"text\" name=\"filter\" onChange={filterText} />\n      </Fragment>\n    )\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { fetchContacts } from 'Redux/Contacts/operation';\nimport { selectIsLoading } from 'Redux/Contacts/selectors';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your tasks</title>\n      </Helmet>\n      <div>{isLoading && 'Request in progress...'}</div>\n      <ContactForm />\n\n      <Filter />\n      <ContactList />\n    </>\n  );\n};\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","userContacts","selectFilterText","filter","selectIsLoading","isLoading","Button","styled","ContactItem","contactItem","dispatch","useDispatch","id","name","number","type","onClick","deleteContact","ContactsList","Text","ContactList","useSelector","filterText","visibleContacts","toLowerCase","includes","length","map","Form","Label","Input","ContactForm","onSubmit","e","preventDefault","form","target","elements","value","some","el","reset","alert","addContacts","htmlFor","pattern","title","required","Filter","Fragment","onChange","filterContacts","useEffect","fetchContacts","Helmet"],"sourceRoot":""}